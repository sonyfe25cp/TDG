<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
          http://www.springframework.org/schema/task
          http://www.springframework.org/schema/task/spring-task-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName">
	
	<context:property-placeholder location="classpath*:system.properties" />

	<!-- 配置DataSource数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
  			<value>com.mysql.jdbc.Driver</value>
		</property>
		<!-- 确定连接数据库的url -->
		<property name="url">
 			<value>jdbc:mysql://10.1.0.127:3306/tdg</value>
		</property>
		<!--确定连接数据库的用户名 -->
		<property name="username">
 			<value>tdg</value>
		</property>
		<!-- 确定连接数据库的密码 -->
		<property name="password">
 			<value></value>
		</property>
	</bean>
	<!-- 由spring管理mybatis的事物 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<!-- 
				PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; 
				PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常; 
				PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; 
				PROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 	如果当前有事务, 则挂起; 
				PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; 
				+/-Exception: +表示异常出现时事物提交 -表示异常出现时事务回滚 
				-->
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="del*"> PROPAGATION_SUPPORTS</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>
	<!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
	<bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<!-- 对类名以MybatisService结尾的类进行代理 -->
			<value>*Service</value>
		</property>
		<!-- 对代理类进行加载拦截器(实现通知的过程) -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>


	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置mapperScanner -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.omartech.tdg.mapper" />
	</bean>
</beans>